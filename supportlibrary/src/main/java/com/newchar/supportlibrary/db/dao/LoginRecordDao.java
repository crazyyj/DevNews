package com.newchar.supportlibrary.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.newchar.supportlibrary.db.entry.LoginRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_RECORD".
*/
public class LoginRecordDao extends AbstractDao<LoginRecord, Long> {

    public static final String TABLENAME = "LOGIN_RECORD";

    /**
     * Properties of entity LoginRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property LoginTime = new Property(1, long.class, "loginTime", false, "LOGIN_TIME");
        public final static Property LoginChannel = new Property(2, String.class, "loginChannel", false, "LOGIN_CHANNEL");
    }


    public LoginRecordDao(DaoConfig config) {
        super(config);
    }
    
    public LoginRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"LOGIN_TIME\" INTEGER NOT NULL ," + // 1: loginTime
                "\"LOGIN_CHANNEL\" TEXT);"); // 2: loginChannel
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_LOGIN_RECORD_LOGIN_TIME_LOGIN_TIME_DESC ON \"LOGIN_RECORD\"" +
                " (\"LOGIN_TIME\" ASC,\"LOGIN_TIME\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getLoginTime());
 
        String loginChannel = entity.getLoginChannel();
        if (loginChannel != null) {
            stmt.bindString(3, loginChannel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getLoginTime());
 
        String loginChannel = entity.getLoginChannel();
        if (loginChannel != null) {
            stmt.bindString(3, loginChannel);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LoginRecord readEntity(Cursor cursor, int offset) {
        LoginRecord entity = new LoginRecord( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // loginTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // loginChannel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginRecord entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setLoginTime(cursor.getLong(offset + 1));
        entity.setLoginChannel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginRecord entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
